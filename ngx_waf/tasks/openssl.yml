---
# author: hanxiong
- name: install | create {{ party_modules_files_path }} path
  file: path={{ party_modules_files_path }} state=directory

- name: install | Check if jemlloc local file is already configured.
  stat: path={{ openssl_name_path }}
  connection: local
  register: openssl_file_result

- name: install | Download {{ jemlloc_url }} file.
  get_url: url={{ openssl_url }} dest={{ software_files_path }} validate_certs=false
  connection: local
  when: not openssl_file_result.stat.exists

- name: install | create dir agent.
  file: path=/data/apps/nginx/party_modules state=directory

- name: install | Copy openssl-1.1.1a file to agent.
  unarchive:
    src: "{{ software_files_path }}/{{ openssl_name }}"
    dest: "{{ party_modules_files_path }}"
    creates: "{{ party_modules_files_path }}/openssl-1.1.1a"

- name: install | Build an install openssl.
  shell: "{{ item }}"
  with_items:
    - "{{ openssl_configure_command }}"
    - make && make install
  args:
    chdir: "{{ party_modules_files_path }}/openssl-1.1.1a"

- name: export | OPENSSL_ROOT env OPENSSL_ROOT variable to agent .bashrc.
  lineinfile: dest=/root/.bashrc line='OPENSSL_ROOT=/data/apps/nginx/party_modules/openssl-1.1.1a'

- name: export | openssl variable to agent .bashrc
  lineinfile: dest=/root/.bashrc line='OPENSSL_LIB=$OPENSSL_ROOT/.openssl'

- name: export | openssl variable to agent .bashrc
  lineinfile: dest=/root/.bashrc line='LD_LIBRARY_PATH=$OPENSSL_ROOT/.openssl/lib'

- name: export | openssl variable to agent .bashrc
  lineinfile: dest=/root/.bashrc line='OPENSSL_ENGINES=$OPENSSL_LIB/lib/engines-1.1'

- name: source | openssl .bashrc.
  shell: ". /root/.bashrc"