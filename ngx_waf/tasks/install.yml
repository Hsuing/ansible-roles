---
# author: hanxiong
- name: install | Confirm the existence of the installation directory.
  file: path={{ software_install_path }} state=directory

- name: install | Check if nginx local file is already configured.
  stat: path={{ nginx_file_path }}
  connection: local
  register: nginx_file_result

- name: install | Create software directory.
  file: path={{ software_files_path }} state=directory
  connection: local
  when: not nginx_file_result.stat.exists

- name: install | Download nginx file.
  get_url: url={{ nginx_file_url }} dest={{ software_files_path }} validate_certs=no
  connection: local
  when: not nginx_file_result.stat.exists

- name: install | Copy nginx file to agent.
  unarchive:
    src: "{{ nginx_file_path }}"
    dest: "/tmp"
    creates: "/tmp/tengine-{{ nginx_version }}"

- name: install | Create nginx group.
  group: name={{ nginx_group }}

- name: install | Create nginx user.
  user: name={{ nginx_user }} group={{ nginx_group }} shell=/sbin/nologin createhome=no

- name: install | Create nginx work Directory.
  file: path={{ item }} state=directory owner={{ nginx_user }} group={{ nginx_group }}
  with_items:
    - "{{ software_install_path }}/nginx"
    - "{{ nginx_temp_path }}/client"
    - "{{ nginx_logpath }}"

- name: install | Check if nginx bin file is already configured.
  stat: path={{ software_install_path }}/sbin/nginx
  register: nginx_bin_result

- name: install | export Lua lib.
  shell: "export LUAJIT_LIB=/data/apps/luajit2/lib"
- name: install | export Lua2 lib.
  shell: "export LUAJIT_INC=/data/apps/luajit2/include/luajit-2.1"

- name: install | Build an install nginx.
  shell: "{{ item }}" 
  with_items:
    - "{{ nginx_configure_command }}"
    - "sed -i 's/-Werror//g' /tmp/tengine-{{ nginx_version }}/objs/Makefile"
    - "sed -i '53s/nginx/apache/g' /tmp/tengine-{{ nginx_version }}/src/http/ngx_http_header_filter_module.c"
    - "sed -i '105s/tengine/apache/g' /tmp/tengine-{{ nginx_version }}/src/http/ngx_http_special_response.c"
    - "sed -i '107s/nginx/apache/g' /tmp/tengine-{{ nginx_version }}/src/http/ngx_http_special_response.c"
    - make && make install
  args:
    chdir: "/tmp/tengine-{{ nginx_version }}/"
  when: not nginx_bin_result.stat.exists
  
- name: create nginx ssl dirrecotr.
  file: path={{ software_install_path }}/nginx/ssl state=directory owner={{ nginx_user }} group={{ nginx_group }}

- name: create nginx geoip dirrecotr.
  file: path={{ software_install_path }}/nginx/geoip state=directory owner={{ nginx_user }} group={{ nginx_group }}

- name: create nginx vhost dirrecotr.
  file: path={{ software_install_path }}/nginx/conf/vhost state=directory owner={{ nginx_user }} group={{ nginx_group }}

- name: create nginx roles dirrecotr.
  file: path={{ software_install_path }}/nginx/conf/roles state=directory owner={{ nginx_user }} group={{ nginx_group }}

- name: install | Set the owner of the nginx directory.
  file: path={{ software_install_path }}/nginx state=directory owner={{ nginx_user }} group={{ nginx_group }} recurse=yes

- name: install | Config environment variable.
  lineinfile: dest=/etc/profile line='export PATH={{ software_install_path }}/nginx/sbin/:$PATH'