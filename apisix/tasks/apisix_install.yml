- name: install | Check if apisix local file is already configured.
  stat: path={{ apisix_file_path }}
  connection: local
  register: apisix_file_result

- name: install | Create apisix user.
  user: name={{ apisix_user }} group={{ apisix_group }} shell=/sbin/nologin createhome=no

- name: install | Download apisix file.
  get_url: url={{ apisix_file_url }} dest={{ software_files_path }}
  connection: local
  when: not apisix_file_result.stat.exists

- name: install | Confirm the existence of the installation directory.
  file: path={{ software_install_path }} state=directory

- name: install | Confirm apisix2.15 the existence of the installation directory.
  file: path={{ software_install_path }}/{{ apisix_dir }} state=directory

- name: install | Copy apisix_src file to agent.
  unarchive:
    src: "{{ apisix_file_path }}"
    dest: "{{ software_install_path }}/{{ apisix_dir }}"

- name: Build an install apisix_src.
  shell: "make deps"
  args:
    chdir: "{{ software_install_path}}/apisix2.15"

- name: make init apisix_src.
  shell: "make init"
  args:
    chdir: "{{ software_install_path}}/apisix2.15"

- block: 
  - name: configure | Setup systemd apisix service.
    template:
      dest: "/usr/lib/systemd/system/apisix.service"
      mode: 0644
      src: apisix.service.j2
  - name: "configure | Ensure apisix is running for centos7."
    systemd: "name=apisix state=started enabled=true"
    ignore_errors: true
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "7"

- block: 
  - name: configure | Setup systemd apisix service.
    template:
      dest: "/usr/lib/systemd/system/apisix.service"
      mode: 0644
      src: apisix.service.j2
  - name: "configure | Ensure apisix is running for centos8."
    systemd: "name=apisix state=started enabled=true"
    ignore_errors: true
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "8"

- block: 
  - name: configure | Setup systemd apisix service.
    template:
      dest: "/usr/lib/systemd/system/apisix.service"
      mode: 0644
      src: apisix.service.j2
  - name: "configure | Ensure apisix is running for Amazon2."
    systemd: "name=apisix state=started enabled=true"
    ignore_errors: true
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"

- name: install | Copy logrotate_apisix file to agent.
  template:
    dest: "/etc/logrotate.d/apisix"
    mode: 0644
    src: apisix_logrotate.j2

- name: install lograte apisix.
  shell: "logrotate -f /etc/logrotate.d/apisix"
